#!/bin/bash

# Hook de pr√©-commit para Agenda de Boteco
# Executa verifica√ß√µes de qualidade antes de permitir o commit

set -e

echo "üöÄ Executando verifica√ß√µes pr√©-commit..."
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Verificar se estamos no diret√≥rio correto
if [ ! -f "pubspec.yaml" ]; then
    echo -e "${RED}‚ùå Erro: Execute este hook no diret√≥rio raiz do projeto Flutter${NC}"
    exit 1
fi

# 1. Verificar formata√ß√£o do c√≥digo
echo -e "${BLUE}1. Verificando formata√ß√£o do c√≥digo...${NC}"
if ! dart format --set-exit-if-changed lib/ test/ > /dev/null 2>&1; then
    echo -e "${RED}‚ùå C√≥digo n√£o est√° formatado corretamente${NC}"
    echo "Execute: dart format lib/ test/"
    exit 1
else
    echo -e "${GREEN}‚úÖ Formata√ß√£o OK${NC}"
fi

# 2. Executar an√°lise est√°tica
echo -e "${BLUE}2. Executando an√°lise est√°tica...${NC}"
if ! flutter analyze --no-pub > /dev/null 2>&1; then
    echo -e "${RED}‚ùå An√°lise est√°tica falhou${NC}"
    echo "Execute: flutter analyze"
    exit 1
else
    echo -e "${GREEN}‚úÖ An√°lise est√°tica OK${NC}"
fi

# 3. Executar lints customizados
echo -e "${BLUE}3. Executando lints customizados...${NC}"
if [ -f "scripts/check_custom_lints.sh" ]; then
    if ! ./scripts/check_custom_lints.sh; then
        echo -e "${RED}‚ùå Lints customizados falharam${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Script de lints customizados n√£o encontrado${NC}"
fi

# 4. Verificar se h√° arquivos gerados pelo build_runner
echo -e "${BLUE}4. Verificando arquivos gerados...${NC}"
GENERATED_FILES=$(find lib/ -name "*.g.dart" -o -name "*.freezed.dart" | wc -l | tr -d ' ')
if [ "$GENERATED_FILES" -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Nenhum arquivo gerado encontrado. Execute: flutter packages pub run build_runner build${NC}"
else
    echo -e "${GREEN}‚úÖ Arquivos gerados encontrados ($GENERATED_FILES)${NC}"
fi

# 5. Verificar se h√° TODOs ou FIXMEs em arquivos staged
echo -e "${BLUE}5. Verificando TODOs/FIXMEs...${NC}"
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.dart$' || true)
if [ -n "$STAGED_FILES" ]; then
    TODOS=$(echo "$STAGED_FILES" | xargs grep -l "TODO\|FIXME\|XXX" || true)
    if [ -n "$TODOS" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Arquivos com TODO/FIXME encontrados:${NC}"
        echo "$TODOS" | while read -r file; do
            echo "  $file"
        done
        echo "  üí° Considere resolver antes do commit"
    else
        echo -e "${GREEN}‚úÖ Nenhum TODO/FIXME encontrado${NC}"
    fi nelse
    echo -e "${GREEN}‚úÖ Nenhum arquivo Dart staged${NC}"
fi

# 6. Verificar tamanho do commit
echo -e "${BLUE}6. Verificando tamanho do commit...${NC}"
FILES_CHANGED=$(git diff --cached --name-only | wc -l | tr -d ' ')
if [ "$FILES_CHANGED" -gt 20 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Commit muito grande ($FILES_CHANGED arquivos). Considere dividir em commits menores.${NC}"
else
    echo -e "${GREEN}‚úÖ Tamanho do commit OK ($FILES_CHANGED arquivos)${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Todas as verifica√ß√µes pr√©-commit passaram!${NC}"
echo "Prosseguindo com o commit..."
echo ""
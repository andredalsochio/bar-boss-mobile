rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isAuth() { return request.auth != null; }
    function me() { return request.auth.uid; }

    function isMember(barId, uid) {
      return exists(/databases/$(database)/documents/bars/$(barId)/members/$(uid));
    }
    function myRole(barId) {
      return get(/databases/$(database)/documents/bars/$(barId)/members/$(me())).data.role;
    }
    function isOwnerRole(barId) {
      return myRole(barId) == 'OWNER';
    }
    function canManageBar(barId) {
      return ['OWNER','ADMIN'].hasAny([myRole(barId)]);
    }

    // address: complement é opcional
    function validAddress(address) {
      return address is map
        && address.keys().hasAll(['cep','street','number','state','city'])
        && address.cep is string && address.cep.size() > 0
        && address.street is string && address.street.size() > 0
        && address.number is string && address.number.size() > 0
        && address.state is string && address.state.size() > 0
        && address.city is string && address.city.size() > 0;
        // complement opcional
    }

    // Validação mínima de bar no create/update
    function validBar(data) {
      return data.keys().hasAll([
        'cnpj','name','responsibleName','contactEmail','contactPhone',
        'address','profile','primaryOwnerUid','createdByUid'
      ])
      && data.name is string && data.name.size() > 0
      && data.cnpj is string && data.cnpj.size() > 0
      && data.responsibleName is string && data.responsibleName.size() > 0
      && data.contactEmail is string && data.contactEmail.size() > 0
      && data.contactPhone is string && data.contactPhone.size() > 0
      && validAddress(data.address)
      && (data.profile.contactsComplete is bool)
      && (data.profile.addressComplete is bool)
      && data.primaryOwnerUid == me()
      && data.createdByUid == me();
    }
    


    function validEvent(data) {
      return data.keys().hasAll(['title','startAt','published','createdByUid'])
        && data.title is string && data.title.size() > 0
        && data.published is bool
        && data.createdByUid == me()
        && (!('endAt' in data) || data.endAt >= data.startAt);
    }

    // users
    match /users/{uid} {
      allow read, write: if isAuth() && uid == me();
    }

    // bars
    match /bars/{barId} {
      // Somente membros (ou criador) leem
      allow read: if isAuth() && (isMember(barId, me()) ||
                                  resource.data.createdByUid == me());

      // Criar bar
      allow create: if isAuth() && validBar(request.resource.data);

      // Atualizar bar
      allow update: if isAuth() && canManageBar(barId) &&
                    validBar(request.resource.data);

      // Deletar bar
      allow delete: if isAuth() && (isOwnerRole(barId) ||
                    resource.data.createdByUid == me());

      // MEMBERS
      match /members/{memberUid} {
        allow read: if isAuth() && isMember(barId, me());
        allow create, update, delete: if isAuth() && isOwnerRole(barId);
      }

      // EVENTS
      match /events/{eventId} {
        allow read: if isAuth() && isMember(barId, me());
        allow create: if isAuth() && isMember(barId, me()) &&
                      validEvent(request.resource.data);
        allow update, delete: if isAuth() && isMember(barId, me());
      }
    }

    // CNPJ REGISTRY
    match /cnpj_registry/{cnpj} {
      allow read: if true;               // permitir verificação de unicidade sem auth
      allow create: if isAuth();         // criado no batch
      allow update, delete: if false;    // imutável (ou política interna)
    }

    // Collection group query para members
    match /{path=**}/members/{memberUid} {
      allow read: if isAuth() && resource.data.uid == me();
    }
  }
}

name: CI

# Trigger on PRs and pushes to main/develop. Ignore docs-only changes to save CI minutes.
on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - 'README.md'
      - 'assets/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
      - 'README.md'
      - 'assets/**'

# Cancel in-progress runs for the same branch to avoid redundant work.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  prepare:
    name: Determine change scope
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.scope.outputs.docs_only }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Determine if the PR only touches docs/markdown so we can skip heavy jobs.
      - name: Filter changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docs:
              - 'docs/**'
              - '**/*.md'
              - 'README.md'
            code:
              - 'lib/**'
              - 'test/**'
              - 'pubspec.yaml'
              - '.github/workflows/**'
              - 'tools/**'
              - 'android/**'
              - 'ios/**'

      - name: Compute docs-only flag
        id: scope
        run: |
          if [[ "${{ steps.changes.outputs.docs }}" == 'true' && "${{ steps.changes.outputs.code }}" != 'true' ]]; then
            echo "docs_only=true" >> "$GITHUB_OUTPUT"
          else
            echo "docs_only=false" >> "$GITHUB_OUTPUT"
          fi

  lint-and-format:
    name: Lint and Format
    needs: prepare
    if: needs.prepare.outputs.docs_only == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Use Flutter version from .fvmrc (3.35.6), which bundles Dart >= 3.7
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Get dependencies
        run: flutter pub get

      # Generate code so analyzer sees all sources; keeps generated files consistent.
      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      # Enforce formatting. Output is suppressed; fail if formatting differs.
      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed lib test

      - name: Flutter analyze
        run: flutter analyze

      # Custom repository lints
      - name: Run custom lints
        run: |
          echo "🔍 Verificando uso de FSKeys nos repositórios..."

          # Verificar se há uso direto de collection() sem FSKeys
          if grep -r "collection('" lib/ --include="*.dart" | grep -v "FSKeys\|FirestoreKeys"; then
            echo "❌ Encontrado uso direto de collection() sem FSKeys"
            echo "Use FSKeys.* para referenciar coleções"
            exit 1
          fi

          # Verificar se há uso de .add() em repositórios
          if grep -r "\.add(" lib/app/data/ --include="*.dart"; then
            echo "❌ Encontrado uso de .add() em repositórios"
            echo "Use .doc().set() ou métodos específicos do repositório"
            exit 1
          fi

          echo "✅ Lints customizados passaram"

  tests:
    name: Unit and Widget Tests (with Firebase Emulator)
    needs: prepare
    if: needs.prepare.outputs.docs_only == 'false'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.6'
          channel: 'stable'
          cache: true

      - name: Flutter pub get
        run: flutter pub get

      - name: Generate code
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Setup Node.js (tools)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache tools/node_modules
        uses: actions/cache@v4
        with:
          path: tools/node_modules
          key: tools-${{ runner.os }}-${{ hashFiles('tools/package-lock.json') }}
          restore-keys: |
            tools-${{ runner.os }}-

      - name: Install tools dependencies
        run: |
          cd tools
          npm ci

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      # Use Java 17 (supported by Firebase Emulator, modern LTS)
      - name: Setup Java for Firebase Emulator
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Start Firebase Emulators and run tests
        env:
          FIREBASE_PROJECT_ID: demo-bar-boss
        run: |
          # Criar firebase.json se não existir
          if [ ! -f firebase.json ]; then
            cat > firebase.json <<'JSON'
            {
              "emulators": {
                "firestore": { "port": 8080 },
                "auth": { "port": 9099 },
                "ui": { "enabled": true, "port": 4000 }
              }
            }
JSON
          fi

          # Executar testes com emulador
          firebase emulators:exec --only firestore,auth --project=demo-bar-boss "flutter test --coverage"

      - name: Upload coverage artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  firestore-rules:
    name: Firestore Rules - Generate and Validate
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache tools/node_modules
        uses: actions/cache@v4
        with:
          path: tools/node_modules
          key: tools-${{ runner.os }}-${{ hashFiles('tools/package-lock.json') }}
          restore-keys: |
            tools-${{ runner.os }}-

      - name: Install tools dependencies
        run: |
          cd tools
          npm ci

      - name: Generate Firestore Rules
        run: |
          cd tools
          npm run generate:rules

      - name: Validate generated rules
        run: |
          if [ ! -f firestore.rules ]; then
            echo "❌ Arquivo firestore.rules não foi gerado"
            exit 1
          fi

          echo "✅ Arquivo firestore.rules gerado com sucesso"
          echo "📄 Conteúdo das regras:"
          head -20 firestore.rules

      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      - name: Test Firestore Rules (dry-run)
        env:
          FIREBASE_PROJECT_ID: demo-bar-boss
        run: |
          # Criar firebase.json se não existir
          if [ ! -f firebase.json ]; then
            cat > firebase.json <<'JSON'
            {
              "firestore": { "rules": "firestore.rules" },
              "emulators": { "firestore": { "port": 8080 } }
            }
JSON
          fi

          # Validar sintaxe das regras
          firebase firestore:rules --project=demo-bar-boss || echo "Validação de regras concluída"

      # Deploy automático apenas para branch main (comentado por segurança)
      # - name: Deploy Firestore Rules
      #   if: github.ref == 'refs/heads/main'
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      #   run: |
      #     firebase deploy --only firestore:rules --project=your-project-id
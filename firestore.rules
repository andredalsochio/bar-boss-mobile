rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

  // Funções de validação
  function isSignedIn() {
    return request.auth != null;
  }

  function uid() {
    return request.auth.uid;
  }

  function isMember(barId) {
    return exists(/databases/$(database)/documents/bars/$(barId)/members/$(uid()));
  }

  function isBarOwner(barId) {
    return isMember(barId) &&
           get(/databases/$(database)/documents/bars/$(barId)/members/$(uid())).data.role == 'OWNER';
  }

  function isBarAdmin(barId) {
    return isMember(barId) &&
           get(/databases/$(database)/documents/bars/$(barId)/members/$(uid())).data.role in ['OWNER', 'ADMIN'];
  }

  function canEditEvents(barId) {
    return isMember(barId) &&
           get(/databases/$(database)/documents/bars/$(barId)/members/$(uid())).data.role in ['OWNER', 'ADMIN', 'EDITOR'];
  }

  function validateUser(data) {
    return data.keys().hasAll(['createdAt']) &&
      (!('displayName' in data) || (data.displayName is string && data.displayName.size() >= 1)) &&
      (!('email' in data) || data.email is string) &&
      (!('photoURL' in data) || data.photoURL is string) &&
      (!('currentBarId' in data) || data.currentBarId is string) &&
      (!('profile' in data) || data.profile is map);
  }

  function validateBar(data) {
    return data.keys().hasAll(['cnpj', 'name', 'createdAt', 'createdByUid']) &&
      data.cnpj is string && data.cnpj.size() >= 11 &&
      data.name is string && data.name.size() >= 1 &&
      data.createdByUid is string &&
      (!('phone' in data) || data.phone is string) &&
      (!('email' in data) || data.email is string) &&
      (!('address' in data) || data.address is map) &&
      (!('profile' in data) || data.profile is map) &&
      (!('status' in data) || data.status is string) &&
      (!('updatedAt' in data) || data.updatedAt is timestamp) &&
      (!('updatedByUid' in data) || data.updatedByUid is string);
  }

  function validateMember(data) {
    return data.keys().hasAll(['uid']) &&
      data.keys().hasAll(['uid', 'role', 'createdAt']) &&
      data.role in ['OWNER', 'ADMIN', 'EDITOR'];
  }

  function validateEvent(data) {
    return data.keys().hasAll(['title', 'startAt', 'createdAt', 'createdByUid']) &&
      data.title is string && data.title.size() >= 1 &&
      data.startAt is timestamp &&
      data.createdByUid is string &&
      (!('endAt' in data) || (data.endAt is timestamp && data.endAt >= data.startAt)) &&
      (!('description' in data) || data.description is string) &&
      (!('attractions' in data) || data.attractions is list) &&
      (!('coverImageUrl' in data) || data.coverImageUrl is string) &&
      (!('published' in data) || data.published is bool) &&
      (!('updatedAt' in data) || data.updatedAt is timestamp) &&
      (!('updatedByUid' in data) || data.updatedByUid is string);
  }

  function validateCnpjRegistry(data) {
    return data.keys().hasAll(['barId', 'createdAt']) &&
      data.barId is string &&
      data.createdAt is timestamp;
  }

  // Coleção users
  match /users/{userId} {
    allow read, write: if isSignedIn() && userId == uid() && validateUser(request.resource.data);
  }

  // Coleção bars
  match /bars/{barId} {
    allow read: if isSignedIn() && isMember(barId);
    allow create: if isSignedIn() && validateBar(request.resource.data);
    allow update: if isSignedIn() && isBarAdmin(barId) && validateBar(request.resource.data);
    allow delete: if isSignedIn() && isBarOwner(barId);

    // Subcoleção members
    match /members/{memberUid} {
      allow read: if isSignedIn() && isMember(barId);
      allow create, update, delete: if isSignedIn() && isBarAdmin(barId) && validateMember(request.resource.data);
    }

    // Subcoleção events
    match /events/{eventId} {
      allow read: if isSignedIn() && isMember(barId);
      allow create, update, delete: if isSignedIn() && canEditEvents(barId) && validateEvent(request.resource.data);
    }
  }

  // Coleção cnpj_registry (apenas escrita pelo app)
  match /cnpj_registry/{cnpj} {
    allow read: if false; // Nunca permitir leitura
    allow create: if isSignedIn() && validateCnpjRegistry(request.resource.data);
    allow update, delete: if false; // Bloquear alterações após criação
  }

  }
}

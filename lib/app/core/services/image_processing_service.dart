import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_image_compress/flutter_image_compress.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;

/// Servi√ßo respons√°vel pelo processamento e otimiza√ß√£o de imagens
/// Resolve problemas de color space (Display P3 vs sRGB) no iOS
/// e converte formatos HEIC/HEIF para JPEG com perfil sRGB
class ImageProcessingService {
  static const int _defaultQuality = 85;
  static const int _maxWidth = 1920;
  static const int _maxHeight = 1080;
  static const int _maxFileSizeBytes = 2 * 1024 * 1024; // 2MB

  /// Processa uma imagem selecionada pelo usu√°rio
  /// Converte HEIC ‚Üí JPEG, aplica compress√£o e corrige color space
  static Future<File?> processSelectedImage(File originalFile) async {
    try {
      debugPrint('üñºÔ∏è Iniciando processamento da imagem: ${originalFile.path}');
      
      // Verifica se o arquivo existe
      if (!await originalFile.exists()) {
        debugPrint('‚ùå Arquivo n√£o encontrado: ${originalFile.path}');
        return null;
      }

      // Obt√©m informa√ß√µes do arquivo original
      final originalSize = await originalFile.length();
      debugPrint('üìä Tamanho original: ${_formatFileSize(originalSize)}');

      // Processa a imagem
      final processedBytes = await _compressAndConvertImage(originalFile);
      if (processedBytes == null) {
        debugPrint('‚ùå Falha no processamento da imagem');
        return null;
      }

      // Salva o arquivo processado
      final processedFile = await _saveProcessedImage(processedBytes);
      if (processedFile == null) {
        debugPrint('‚ùå Falha ao salvar imagem processada');
        return null;
      }

      final processedSize = await processedFile.length();
      debugPrint('‚úÖ Imagem processada com sucesso!');
      debugPrint('üìä Tamanho final: ${_formatFileSize(processedSize)}');
      debugPrint('üìà Redu√ß√£o: ${((originalSize - processedSize) / originalSize * 100).toStringAsFixed(1)}%');

      return processedFile;
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erro no processamento da imagem: $e');
      debugPrint('Stack trace: $stackTrace');
      return null;
    }
  }

  /// Comprime e converte a imagem para JPEG com perfil sRGB
  /// Resolve problemas de color space do iOS (Display P3 ‚Üí sRGB)
  static Future<Uint8List?> _compressAndConvertImage(File file) async {
    try {
      // Primeira tentativa: compress√£o com convers√£o para JPEG
      // Isso for√ßa a convers√£o de HEIC ‚Üí JPEG e aplica perfil sRGB
      var result = await FlutterImageCompress.compressWithFile(
        file.absolute.path,
        minWidth: _maxWidth,
        minHeight: _maxHeight,
        quality: _defaultQuality,
        format: CompressFormat.jpeg, // For√ßa convers√£o para JPEG
        autoCorrectionAngle: true, // Corrige orienta√ß√£o automaticamente
        keepExif: false, // Remove metadados EXIF para reduzir tamanho
      );

      if (result == null) {
        debugPrint('‚ùå Primeira tentativa de compress√£o falhou');
        return null;
      }

      // Verifica se o resultado ainda est√° muito grande
      if (result.length > _maxFileSizeBytes) {
        debugPrint('‚ö†Ô∏è Imagem ainda muito grande, aplicando compress√£o adicional');
        result = await _applyAdditionalCompression(result);
      }

      debugPrint('‚úÖ Compress√£o conclu√≠da: ${_formatFileSize(result?.length ?? 0)}');
      return result;
    } on UnsupportedError catch (e) {
      // Fallback para dispositivos que n√£o suportam o formato
      debugPrint('‚ö†Ô∏è Formato n√£o suportado, tentando fallback: $e');
      return await _fallbackCompression(file);
    } catch (e) {
      debugPrint('‚ùå Erro na compress√£o: $e');
      return null;
    }
  }

  /// Aplica compress√£o adicional se a imagem ainda estiver muito grande
  static Future<Uint8List?> _applyAdditionalCompression(Uint8List imageBytes) async {
    try {
      // Reduz qualidade gradualmente at√© atingir o tamanho desejado
      for (int quality = 70; quality >= 30; quality -= 10) {
        final result = await FlutterImageCompress.compressWithList(
          imageBytes,
          minWidth: _maxWidth ~/ 1.5, // Reduz dimens√µes tamb√©m
          minHeight: _maxHeight ~/ 1.5,
          quality: quality,
          format: CompressFormat.jpeg,
        );

        if (result.length <= _maxFileSizeBytes) {
          debugPrint('‚úÖ Compress√£o adicional bem-sucedida com qualidade $quality%');
          return result;
        }
      }

      debugPrint('‚ö†Ô∏è N√£o foi poss√≠vel reduzir para o tamanho desejado');
      return imageBytes; // Retorna o melhor resultado obtido
    } catch (e) {
      debugPrint('‚ùå Erro na compress√£o adicional: $e');
      return imageBytes;
    }
  }

  /// Compress√£o de fallback para casos onde o formato principal falha
  static Future<Uint8List?> _fallbackCompression(File file) async {
    try {
      debugPrint('üîÑ Executando compress√£o de fallback');
      
      return await FlutterImageCompress.compressWithFile(
        file.absolute.path,
        minWidth: _maxWidth,
        minHeight: _maxHeight,
        quality: 60, // Qualidade mais baixa para garantir compatibilidade
        format: CompressFormat.jpeg,
        autoCorrectionAngle: true,
        keepExif: false,
      );
    } catch (e) {
      debugPrint('‚ùå Fallback tamb√©m falhou: $e');
      return null;
    }
  }

  /// Salva a imagem processada em um arquivo tempor√°rio
  static Future<File?> _saveProcessedImage(Uint8List imageBytes) async {
    try {
      final tempDir = await getTemporaryDirectory();
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'processed_image_$timestamp.jpg';
      final filePath = path.join(tempDir.path, fileName);
      
      final file = File(filePath);
      await file.writeAsBytes(imageBytes);
      
      debugPrint('üíæ Imagem salva em: $filePath');
      return file;
    } catch (e) {
      debugPrint('‚ùå Erro ao salvar imagem: $e');
      return null;
    }
  }

  /// Formata o tamanho do arquivo para exibi√ß√£o
  static String _formatFileSize(int bytes) {
    if (bytes < 1024) return '$bytes B';
    if (bytes < 1024 * 1024) return '${(bytes / 1024).toStringAsFixed(1)} KB';
    return '${(bytes / (1024 * 1024)).toStringAsFixed(1)} MB';
  }

  /// Limpa arquivos tempor√°rios antigos (mais de 1 hora)
  static Future<void> cleanupTempFiles() async {
    try {
      final tempDir = await getTemporaryDirectory();
      final files = tempDir.listSync();
      final cutoffTime = DateTime.now().subtract(const Duration(hours: 1));

      for (final file in files) {
        if (file is File && file.path.contains('processed_image_')) {
          final stat = await file.stat();
          if (stat.modified.isBefore(cutoffTime)) {
            await file.delete();
            debugPrint('üóëÔ∏è Arquivo tempor√°rio removido: ${file.path}');
          }
        }
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro na limpeza de arquivos tempor√°rios: $e');
    }
  }

  /// Valida se um arquivo √© uma imagem v√°lida
  static bool isValidImageFile(File file) {
    final extension = path.extension(file.path).toLowerCase();
    const validExtensions = ['.jpg', '.jpeg', '.png', '.heic', '.heif'];
    return validExtensions.contains(extension);
  }

  /// Obt√©m informa√ß√µes detalhadas de uma imagem
  static Future<Map<String, dynamic>?> getImageInfo(File file) async {
    try {
      if (!await file.exists()) return null;

      final size = await file.length();
      final extension = path.extension(file.path).toLowerCase();
      
      return {
        'path': file.path,
        'size': size,
        'sizeFormatted': _formatFileSize(size),
        'extension': extension,
        'isValid': isValidImageFile(file),
      };
    } catch (e) {
      debugPrint('‚ùå Erro ao obter informa√ß√µes da imagem: $e');
      return null;
    }
  }
}
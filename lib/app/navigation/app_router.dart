import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:provider/provider.dart';

import 'package:bar_boss_mobile/app/core/constants/app_routes.dart';
import 'package:bar_boss_mobile/app/modules/auth/viewmodels/auth_viewmodel.dart';
import 'package:bar_boss_mobile/app/modules/auth/views/login_page.dart';
import 'package:bar_boss_mobile/app/modules/auth/views/email_verification_page.dart';
import 'package:bar_boss_mobile/app/modules/auth/views/email_verification_success_page.dart';
import 'package:bar_boss_mobile/app/modules/auth/views/forgot_password_page.dart';
import 'package:bar_boss_mobile/app/modules/register_bar/views/step1_page.dart';
import 'package:bar_boss_mobile/app/modules/register_bar/views/step2_page.dart';
import 'package:bar_boss_mobile/app/modules/register_bar/views/step3_page.dart';
import 'package:bar_boss_mobile/app/modules/home/views/home_page.dart';
import 'package:bar_boss_mobile/app/modules/bar_profile/views/bar_profile_page.dart';
import 'package:bar_boss_mobile/app/modules/settings/views/settings_page.dart';
import 'package:bar_boss_mobile/app/modules/events/views/events_list_page.dart';
import 'package:bar_boss_mobile/app/modules/events/views/event_form_page.dart';
import 'package:bar_boss_mobile/app/modules/events/views/event_details_page.dart';

/// Configura√ß√£o centralizada de navega√ß√£o com GoRouter
class AppRouter {
  static GoRouter createRouter(AuthViewModel authViewModel) {
    return GoRouter(
      initialLocation: AppRoutes.login,
      refreshListenable: authViewModel,
      redirect: (context, state) => _handleRedirect(context, state, authViewModel),
      routes: [
        // Rotas de autentica√ß√£o
        GoRoute(
          path: AppRoutes.login,
          name: 'login',
          builder: (context, state) => const LoginPage(),
        ),
        GoRoute(
          path: AppRoutes.emailVerification,
          name: 'emailVerification',
          builder: (context, state) => const EmailVerificationPage(),
        ),
        GoRoute(
          path: AppRoutes.forgotPassword,
          name: 'forgotPassword',
          builder: (context, state) => const ForgotPasswordPage(),
        ),
        GoRoute(
          path: AppRoutes.emailVerificationSuccess,
          name: 'emailVerificationSuccess',
          builder: (context, state) => const EmailVerificationSuccessPage(),
        ),

        // Rotas de cadastro
        GoRoute(
          path: AppRoutes.registerStep1,
          name: 'registerStep1',
          builder: (context, state) => const Step1Page(),
        ),
        GoRoute(
          path: AppRoutes.registerStep2,
          name: 'registerStep2',
          builder: (context, state) => const Step2Page(),
        ),
        GoRoute(
          path: AppRoutes.registerStep3,
          name: 'registerStep3',
          builder: (context, state) => const Step3Page(),
        ),

        // Rotas principais (protegidas por autentica√ß√£o)
        GoRoute(
          path: AppRoutes.home,
          name: 'home',
          builder: (context, state) => const HomePage(),
        ),
        GoRoute(
          path: AppRoutes.eventsList,
          name: 'eventsList',
          redirect: _handleBarRegistrationGuard,
          builder: (context, state) => const EventsListPage(),
        ),
        GoRoute(
          path: AppRoutes.eventForm,
          name: 'eventForm',
          redirect: _handleBarRegistrationGuard,
          builder: (context, state) => const EventFormPage(),
        ),
        GoRoute(
          path: AppRoutes.eventEdit,
          name: 'eventEdit',
          redirect: _handleBarRegistrationGuard,
          builder: (context, state) {
            final eventId = state.pathParameters['id'];
            if (eventId == null) {
              // Se n√£o h√° ID, redireciona para lista de eventos
              WidgetsBinding.instance.addPostFrameCallback((_) {
                context.pushReplacementNamed('eventsList');
              });
              return const Scaffold(
                body: Center(child: CircularProgressIndicator()),
              );
            }
            return EventFormPage(eventId: eventId);
          },
        ),
        GoRoute(
          path: AppRoutes.eventDetails,
          name: 'eventDetails',
          redirect: _handleBarRegistrationGuard,
          builder: (context, state) {
            final eventId = state.pathParameters['id'];
            if (eventId == null) {
              // Se n√£o h√° ID, redireciona para lista de eventos
              WidgetsBinding.instance.addPostFrameCallback((_) {
                context.pushReplacementNamed('eventsList');
              });
              return const Scaffold(
                body: Center(child: CircularProgressIndicator()),
              );
            }
            return EventDetailsPage(eventId: eventId);
          },
        ),

        // Rota para perfil do bar
        GoRoute(
          path: AppRoutes.barProfile,
          name: 'barProfile',
          builder: (context, state) => const BarProfilePage(),
        ),

        // Rota para configura√ß√µes
        GoRoute(
          path: AppRoutes.settings,
          name: 'settings',
          builder: (context, state) => const SettingsPage(),
        ),
      ],
    );
  }

  /// Guard de autentica√ß√£o e redirecionamento
  /// L√≥gica principal de redirecionamento baseada no estado de autentica√ß√£o
  static String? _handleRedirect(
    BuildContext context,
    GoRouterState state,
    AuthViewModel authViewModel,
  ) {
    final isLoggedIn = authViewModel.isAuthenticated;
    final currentLocation = state.matchedLocation;
    
    // Log de debug para diagn√≥stico
    debugPrint('üîÑ [AppRouter] Redirect check - Location: $currentLocation, LoggedIn: $isLoggedIn');
    
    // Definir rotas permitidas por estado
    const publicRoutes = [
      AppRoutes.login,
      AppRoutes.registerStep1,
      AppRoutes.registerStep2,
      AppRoutes.registerStep3,
      AppRoutes.forgotPassword,
    ];

    // ‚Üê NOVO: Verifica√ß√£o idempotente - se j√° est√° na rota certa, n√£o redirecionar
    if (!isLoggedIn && publicRoutes.contains(currentLocation)) {
      debugPrint('‚úÖ [AppRouter] Usu√°rio n√£o logado em rota p√∫blica - sem redirect');
      return null;
    }

    // Se o usu√°rio n√£o est√° logado, redirecionar para login
    if (!isLoggedIn) {
      debugPrint('üîÑ [AppRouter] Usu√°rio n√£o logado - redirecionando para login');
      return AppRoutes.login;
    }

    // === USU√ÅRIO LOGADO ===
    final emailVerified = authViewModel.isCurrentUserEmailVerified;
    final isFromSocialFlow = authViewModel.isFromSocialFlow;
    final canAccessApp = emailVerified || isFromSocialFlow;
    
    debugPrint('üìß [AppRouter] Email verified: $emailVerified, Social: $isFromSocialFlow, CanAccess: $canAccessApp');

    // ‚Üê MELHORADO: L√≥gica mais clara para verifica√ß√£o de email
    if (!canAccessApp) {
      // Se n√£o pode acessar o app e j√° est√° na tela de verifica√ß√£o, n√£o redirecionar
      if (currentLocation == AppRoutes.emailVerification) {
        debugPrint('‚úÖ [AppRouter] Usu√°rio na tela de verifica√ß√£o - sem redirect');
        return null;
      }
      
      // Se n√£o pode acessar e n√£o est√° na tela de verifica√ß√£o, redirecionar
      debugPrint('üîÑ [AppRouter] Email n√£o verificado - redirecionando para verifica√ß√£o');
      return AppRoutes.emailVerification;
    }

    // ‚Üê NAVEGA√á√ÉO AUTOM√ÅTICA: Se pode acessar e est√° na tela de verifica√ß√£o, ir para home
    if (canAccessApp && currentLocation == AppRoutes.emailVerification) {
      debugPrint('üéâ [AppRouter] Email verificado - navega√ß√£o autom√°tica para home');
      return AppRoutes.home;
    }

    // ‚Üê NOVO: Verificar se usu√°rio de login social pode acessar rotas de registro
    const registerRoutes = [
      AppRoutes.registerStep1,
      AppRoutes.registerStep2,
      AppRoutes.registerStep3,
    ];
    
    // Se est√° em rota de registro e √© usu√°rio social que n√£o completou cadastro, permitir acesso
    if (registerRoutes.contains(currentLocation) && 
        isFromSocialFlow && 
        !authViewModel.hasCompletedFullRegistration) {
      debugPrint('‚úÖ [AppRouter] Usu√°rio social em rota de registro - permitindo acesso para completar cadastro');
      return null;
    }
    
    // ‚Üê NOVO: Se est√° em rota p√∫blica mas pode acessar o app, ir para home
    if (canAccessApp && publicRoutes.contains(currentLocation)) {
      debugPrint('üîÑ [AppRouter] Usu√°rio autenticado em rota p√∫blica - redirecionando para home');
      return AppRoutes.home;
    }

    // ‚Üê MELHORADO: Guard de completude mais simples (n√£o bloqueia, apenas informa)
    // A verifica√ß√£o de completude ser√° feita na HomePage via banner
    
    debugPrint('‚úÖ [AppRouter] Nenhum redirect necess√°rio');
    return null;
  }

  /// Guard para verificar completude do perfil conforme BUSINESS_RULES.md
  /// N√£o bloqueia navega√ß√£o, apenas exibe banner na Home
  static String? _handleProfileCompletenessGuard(
    BuildContext context,
    GoRouterState state,
  ) {
    // TODO: Implementar l√≥gica de verifica√ß√£o de completude
    // Por enquanto, n√£o bloqueia navega√ß√£o conforme especificado:
    // "N√£o bloquear cria√ß√£o de evento por perfil incompleto; apenas avisar"
    
    // A verifica√ß√£o de completude ser√° feita na HomePage via HomeViewModel
    // que exibir√° o banner "Complete seu cadastro (X/3)" quando necess√°rio
    
    return null; // N√£o redireciona
  }

  /// Guard para verificar se o usu√°rio tem bar cadastrado
  /// Usa cache para evitar chamadas ass√≠ncronas no redirect
  static String? _handleBarRegistrationGuard(
    BuildContext context,
    GoRouterState state,
  ) {
    try {
      final authViewModel = Provider.of<AuthViewModel>(context, listen: false);
      
      // Primeiro, verificar se o usu√°rio est√° autenticado
      if (!authViewModel.isAuthenticated) {
        debugPrint('üîí [AppRouter] BLOCKED - Usu√°rio n√£o autenticado');
        return AppRoutes.login;
      }
      
      final hasBarCached = authViewModel.hasBarRegisteredCached;
      final completedFullRegistration = authViewModel.hasCompletedFullRegistration;
      
      // Telemetria clara para debug
      debugPrint('üîç [AppRouter] GUARD Estado:');
      debugPrint('  - isAuthenticated: ${authViewModel.isAuthenticated}');
      debugPrint('  - hasBarCached: $hasBarCached (${hasBarCached == null ? 'LOADING' : hasBarCached ? 'FRESH-TRUE' : 'FRESH-FALSE'})');
      debugPrint('  - completedFullRegistration: $completedFullRegistration (${authViewModel.isFromSocialFlow ? 'SOCIAL' : 'EMAIL'})');
      debugPrint('  - location: ${state.uri.toString()}');
      
      // ‚úÖ CORRE√á√ÉO 1: Tratar hasBarCached=null como estado de carregamento
      // N√£o decidir rota enquanto hasBarCached for null
      if (hasBarCached == null) {
        debugPrint('‚è≥ [AppRouter] LOADING - Cache n√£o dispon√≠vel, disparando ensureFresh()');
        
        // Disparar hasBarRegistered() para repopular o cache antes da decis√£o
        authViewModel.hasBarRegistered().then((hasBar) {
          debugPrint('üîÑ [AppRouter] Cache repovoado: hasBar=$hasBar');
          
          // Ap√≥s repovoamento, verificar se precisa redirecionar
          if (!hasBar && context.mounted && authViewModel.isAuthenticated) {
            debugPrint('üè™ [AppRouter] REDIRECT - Usu√°rio sem bar ap√≥s cache fresh');
            context.go(AppRoutes.registerStep1);
          }
        }).catchError((e) {
          debugPrint('‚ùå [AppRouter] Erro ao repopular cache: $e');
        });
        
        // Retornar null para n√£o bloquear navega√ß√£o durante loading
        debugPrint('‚úÖ [AppRouter] ALLOWED - Permitindo navega√ß√£o durante loading');
        return null;
      }
      
      // ‚úÖ CORRE√á√ÉO 2: Fonte √∫nica de verdade - ler apenas do AuthViewModel
      // Se tem cache e n√£o tem bar, redirecionar
      if (!hasBarCached) {
        debugPrint('üîí [AppRouter] BLOCKED - Cache indica usu√°rio sem bar (FRESH-FALSE)');
        return AppRoutes.registerStep1;
      }
      
      debugPrint('‚úÖ [AppRouter] ALLOWED - Usu√°rio tem bar cadastrado (FRESH-TRUE)');
      return null; // Permite navega√ß√£o
    } catch (e) {
      debugPrint('‚ùå [AppRouter] ERRO no guard: $e');
      return AppRoutes.login; // Redireciona para login em caso de erro
    }
  }
}
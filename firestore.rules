rules_version = '2';
service cloud.firestore {
  match /databases/{db}/documents {

    function isAuthed() { return request.auth != null; }
    function isSelf(uid) { return isAuthed() && request.auth.uid == uid; }

    // --- USERS ---
    match /users/{uid} {
      allow read: if isSelf(uid);
      allow create: if isSelf(uid);
      allow update: if isSelf(uid);
      allow delete: if false;
    }

    // --- BARS ---
    match /bars/{barId} {
      allow read: if isAuthed();

      // criar bar só se o dono no payload for o usuário logado
      allow create: if isAuthed() && 
        (request.resource.data.primaryOwnerUid == request.auth.uid || 
         request.resource.data.ownerUid == request.auth.uid);

      // atualizar/excluir bar só se o dono do doc for o usuário logado
      allow update, delete: if isAuthed() && 
        (resource.data.primaryOwnerUid == request.auth.uid || 
         resource.data.ownerUid == request.auth.uid);

      // Subcoleção MEMBERS (compat)
      match /members/{memberUid} {
        allow read: if isSelf(memberUid);
        allow create: if isSelf(memberUid) && 
          request.resource.data.uid == request.auth.uid;
        allow update, delete: if false; // owners/admins podem gerenciar via função/server se quiser
      }

      // Subcoleção MEMBERSHIPS (padrão novo)
      match /memberships/{memberUid} {
        allow read: if isSelf(memberUid);
        allow create: if isSelf(memberUid) && 
          request.resource.data.uid == request.auth.uid;
        allow update, delete: if false;
      }

      // EVENTS (opcional básico p/ não travar)
      match /events/{eventId} {
        allow read: if isAuthed();
        allow create: if isAuthed() && 
          request.resource.data.createdByUid == request.auth.uid;
        allow update, delete: if isAuthed() && 
          (resource.data.createdByUid == request.auth.uid);
      }
    }

    // --- CNPJ REGISTRY ---
    match /cnpj_registry/{cnpj} {
      allow read: if isAuthed();
      allow create: if isAuthed() && 
        (request.resource.data.primaryOwnerUid == request.auth.uid || 
         request.resource.data.ownerUid == request.auth.uid);
      allow update: if isAuthed() && 
        (resource.data.primaryOwnerUid == request.auth.uid || 
         resource.data.ownerUid == request.auth.uid);
      allow delete: if false;
    }

    // bloqueio padrão
    match /{doc=**} {
      allow read, write: if false;
    }
  }
}